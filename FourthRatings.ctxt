#BlueJ class context
comment0.target=FourthRatings
comment1.params=id\ minimalRaters
comment1.target=double\ getAverageByID(java.lang.String,\ int)
comment2.params=minimalRaters
comment2.target=java.util.ArrayList\ getAverageRatings(int)
comment3.params=minimalRaters\ filterCriteria
comment3.target=java.util.ArrayList\ getAverageRatingsByFilter(int,\ Filter)
comment4.params=me\ r
comment4.target=double\ dotProduct(Rater,\ Rater)
comment5.params=id
comment5.target=java.util.ArrayList\ getSimilarities(java.lang.String)
comment6.params=id\ numSimilarRaters\ minimalRaters
comment6.target=java.util.ArrayList\ getSimilarRatings(java.lang.String,\ int,\ int)
comment6.text=\n\ \ \ \ public\ ArrayList<Rating>\ getSimilarRatings(String\ id,\ int\ numSimilarRaters,\ int\ minimalRaters){\n\ \ \ \ \ \ \ \ ArrayList<Rating>\ weightedAvg\ \=\ new\ ArrayList<Rating>();\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ ArrayList<Rating>\ similarities\ \=\ getSimilarities(id);\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ ArrayList<Rating>\ topsimPositives\ \=\ new\ ArrayList<Rating>();//\ Rating(raterId,\ similarity)\n\ \ \ \ \ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ numSimilarRaters;\ i++){\n\ \ \ \ \ \ \ \ \ \ \ \ if(similarities.get(i).getValue()\ >\ 0){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ topsimPositives.add(similarities.get(i));\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ HashMap<String,\ ArrayList<Rating>>\ ratingCount\ \=\ new\ HashMap<String,\ ArrayList<Rating>>();\n\ \ \ \ \ \ \ \ //\ mov,\ Rating(raterId,\ similarity)\n\ \ \ \ \ \ \ \ for(Rating\ r\:\ topsimPositives){\n\ \ \ \ \ \ \ \ \ \ \ \ Rater\ rater\ \=\ RaterDatabase.getRater(r.getItem());\n\ \ \ \ \ \ \ \ \ \ \ \ for(String\ i\:\ rater.getItemsRated()){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if(\!ratingCount.containsKey(i)){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ArrayList<Rating>\ selectedsimPositives\ \=\ new\ ArrayList<Rating>();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ selectedsimPositives.add(r);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ratingCount.put(i,\ selectedsimPositives);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ else{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ArrayList<Rating>\ selectedsimPositives\ \=\ ratingCount.get(i);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ selectedsimPositives.add(r);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ratingCount.put(i,\ selectedsimPositives);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ ArrayList<Rating>\ weightedRatings\ \=\ new\ ArrayList<Rating>();\n\ \ \ \ \ \ \ \ for\ (Map.Entry<String,\ ArrayList<Rating>>\ set\ \:\ ratingCount.entrySet()){\n\ \ \ \ \ \ \ \ \ \ \ \ String\ movieID\ \=\ set.getKey();\n\ \ \ \ \ \ \ \ \ \ \ \ ArrayList<Rating>\ simPositivesintop\ \=\ set.getValue();\n\ \ \ \ \ \ \ \ \ \ \ \ double\ countsimPositivesintop\ \=\ set.getValue().size();\n\ \ \ \ \ \ \ \ \ \ \ \ if(countsimPositivesintop\ >\=\ minimalRaters){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //System.out.println(movieID\ +\ "\ \ "\ +\ countsimPositivesintop\ +\ "\:\ ");\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ double\ sumMulSimRbyR\ \=\ 0.0;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ for(Rating\ r\:\ simPositivesintop){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //System.out.println(r);//\ [RaterId\ \ Similarity]\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //System.out.println(RaterDatabase.getRater(r.getItem()).getRating(movieID)+"\\n");\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ double\ simR\ \=\ r.getValue();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ double\ ratingR\ \=\ RaterDatabase.getRater(r.getItem()).getRating(movieID);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sumMulSimRbyR\ +\=\ simR\ *\ ratingR;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\ \ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ double\ weightedAvgratings\ \=\ sumMulSimRbyR/countsimPositivesintop;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String\ movTitle\ \=\ MovieDatabase.getTitle(movieID);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Rating\ weighted\ \=\ new\ Rating(movTitle,\ weightedAvgratings);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ weightedRatings.add(weighted);\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ Collections.sort(weightedRatings,\ Collections.reverseOrder());\n\ \ \ \ \ \ \ \ return\ weightedRatings;\n\ \ \ \ }\n
comment7.params=id\ numSimilarRaters\ minimalRaters\ filterCriteria
comment7.target=java.util.ArrayList\ getSimilarRatingsByFilter(java.lang.String,\ int,\ int,\ Filter)
numComments=8
